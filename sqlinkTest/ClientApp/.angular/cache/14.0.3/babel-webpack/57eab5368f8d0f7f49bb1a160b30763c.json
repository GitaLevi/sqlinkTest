{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/account.service\";\nimport * as i2 from \"../services/loading.service\";\nexport let ErrorInterceptor = /*#__PURE__*/(() => {\n  class ErrorInterceptor {\n    constructor(accountService, loadingService) {\n      this.accountService = accountService;\n      this.loadingService = loadingService;\n    }\n\n    intercept(request, next) {\n      return next.handle(request).pipe(catchError(err => {\n        var _a;\n\n        if ([401, 403].includes(err.status) && this.accountService.getUserValue()) {\n          this.accountService.logout();\n        }\n\n        const error = ((_a = err.error) === null || _a === void 0 ? void 0 : _a.message) || err.statusText;\n        console.error(err);\n        this.loadingService.loadingSubject.next(false);\n        return throwError(error);\n      }));\n    }\n\n  }\n\n  ErrorInterceptor.ɵfac = function ErrorInterceptor_Factory(t) {\n    return new (t || ErrorInterceptor)(i0.ɵɵinject(i1.AccountService), i0.ɵɵinject(i2.LoadingService));\n  };\n\n  ErrorInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ErrorInterceptor,\n    factory: ErrorInterceptor.ɵfac\n  });\n  return ErrorInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}