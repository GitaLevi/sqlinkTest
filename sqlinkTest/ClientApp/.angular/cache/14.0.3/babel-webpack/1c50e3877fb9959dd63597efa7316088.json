{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../services/loading.service\";\nimport * as i3 from \"../../services/account.service\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"src/app/services/local-storage.service\";\nimport * as i6 from \"@angular/common\";\n\nfunction LoginComponent_small_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 10);\n    i0.ɵɵtext(1, \" Email address is required! \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction LoginComponent_small_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 10);\n    i0.ɵɵtext(1, \" Email address not well formed! \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction LoginComponent_small_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 10);\n    i0.ɵɵtext(1, \" Password is required! \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction LoginComponent_small_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 10);\n    i0.ɵɵtext(1, \" The password must contain only English letters and numbers, Between 8-20 characters \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nexport let LoginComponent = /*#__PURE__*/(() => {\n  class LoginComponent {\n    constructor(fb, loadingService, accountService, router, localStorageService) {\n      this.fb = fb;\n      this.loadingService = loadingService;\n      this.accountService = accountService;\n      this.router = router;\n      this.localStorageService = localStorageService;\n      this.resetForm();\n    }\n\n    ngOnInit() {}\n\n    resetForm() {\n      this.loginForm = this.fb.group({\n        email: ['', [Validators.required, Validators.email]],\n        password: ['', [Validators.required, Validators.pattern(/(?:\\d+[a-z]|[a-z]+\\d)[a-z\\d]*/gm), Validators.minLength(8), Validators.maxLength(20)]]\n      });\n    }\n\n    submitForm() {\n      if (this.loginForm.valid) {\n        this.loadingService.loadingSubject.next(true);\n        this.accountService.loginUser(this.loginForm.value).subscribe({\n          next: response => {\n            if (response) {\n              this.router.navigate(['/info']);\n            } else {\n              alert(\"User does not exist in the system\");\n            }\n\n            this.loadingService.loadingSubject.next(false);\n          }\n        });\n      } else {\n        alert(\"loginForm is invalid\");\n      }\n    }\n\n  }\n\n  LoginComponent.ɵfac = function LoginComponent_Factory(t) {\n    return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.LoadingService), i0.ɵɵdirectiveInject(i3.AccountService), i0.ɵɵdirectiveInject(i4.Router), i0.ɵɵdirectiveInject(i5.LocalStorageService));\n  };\n\n  LoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: LoginComponent,\n    selectors: [[\"app-login\"]],\n    decls: 18,\n    vars: 6,\n    consts: [[1, \"text-center\"], [1, \"container\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [\"for\", \"exampleInputEmail1\"], [\"type\", \"email\", \"formControlName\", \"email\", \"placeholder\", \"Enter email\", 1, \"form-control\"], [\"class\", \"form-text text-muted\", 4, \"ngIf\"], [\"for\", \"exampleInputPassword1\"], [\"type\", \"password\", \"formControlName\", \"password\", \"placeholder\", \"Password\", 1, \"form-control\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"disabled\"], [1, \"form-text\", \"text-muted\"]],\n    template: function LoginComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"h1\", 0);\n        i0.ɵɵtext(1, \"Login Page\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"div\", 1)(3, \"form\", 2);\n        i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_3_listener() {\n          return ctx.submitForm();\n        });\n        i0.ɵɵelementStart(4, \"div\", 3)(5, \"label\", 4);\n        i0.ɵɵtext(6, \"Email address\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(7, \"input\", 5);\n        i0.ɵɵtemplate(8, LoginComponent_small_8_Template, 2, 0, \"small\", 6);\n        i0.ɵɵtemplate(9, LoginComponent_small_9_Template, 2, 0, \"small\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"div\", 3)(11, \"label\", 7);\n        i0.ɵɵtext(12, \"Password\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(13, \"input\", 8);\n        i0.ɵɵtemplate(14, LoginComponent_small_14_Template, 2, 0, \"small\", 6);\n        i0.ɵɵtemplate(15, LoginComponent_small_15_Template, 2, 0, \"small\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"button\", 9);\n        i0.ɵɵtext(17, \"Login\");\n        i0.ɵɵelementEnd()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngIf\", ctx.loginForm.controls.email.touched && (ctx.loginForm.controls.email.errors == null ? null : ctx.loginForm.controls.email.errors.required));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.loginForm.controls.email.touched && (ctx.loginForm.controls.email.errors == null ? null : ctx.loginForm.controls.email.errors.email));\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngIf\", ctx.loginForm.controls.password.touched && (ctx.loginForm.controls.password.errors == null ? null : ctx.loginForm.controls.password.errors.required));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.loginForm.controls.password.touched && ctx.loginForm.controls.password.errors);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"disabled\", !ctx.loginForm.valid);\n      }\n    },\n    dependencies: [i6.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName]\n  });\n  return LoginComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}