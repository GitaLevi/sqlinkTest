{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../services/loading.service\";\nimport * as i3 from \"../../services/account.service\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"src/app/services/local-storage.service\";\nimport * as i6 from \"@angular/common\";\nfunction LoginComponent_small_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 10);\n    i0.ɵɵtext(1, \" Email address is required! \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_small_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 10);\n    i0.ɵɵtext(1, \" Email address not well formed! \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_small_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 10);\n    i0.ɵɵtext(1, \" Password is required! \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_small_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 10);\n    i0.ɵɵtext(1, \" The password must contain only English letters and numbers, Between 8-20 characters \");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class LoginComponent {\n  constructor(fb, loadingService, accountService, router, localStorageService) {\n    this.fb = fb;\n    this.loadingService = loadingService;\n    this.accountService = accountService;\n    this.router = router;\n    this.localStorageService = localStorageService;\n    this.resetForm();\n  }\n  ngOnInit() {}\n  resetForm() {\n    this.loginForm = this.fb.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.pattern(/(?:\\d+[a-z]|[a-z]+\\d)[a-z\\d]*/gm), Validators.minLength(8), Validators.maxLength(20)]]\n    });\n  }\n  submitForm() {\n    if (this.loginForm.valid) {\n      this.loadingService.loadingSubject.next(true);\n      this.accountService.loginUser(this.loginForm.value).subscribe({\n        next: response => {\n          if (response) {\n            this.router.navigate(['/info']);\n          } else {\n            alert(\"User does not exist in the system\");\n          }\n          this.loadingService.loadingSubject.next(false);\n        }\n      });\n    } else {\n      alert(\"loginForm is invalid\");\n    }\n  }\n}\nLoginComponent.ɵfac = function LoginComponent_Factory(t) {\n  return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.LoadingService), i0.ɵɵdirectiveInject(i3.AccountService), i0.ɵɵdirectiveInject(i4.Router), i0.ɵɵdirectiveInject(i5.LocalStorageService));\n};\nLoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LoginComponent,\n  selectors: [[\"app-login\"]],\n  decls: 18,\n  vars: 6,\n  consts: [[1, \"text-center\"], [1, \"container\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [\"for\", \"exampleInputEmail1\"], [\"type\", \"email\", \"formControlName\", \"email\", \"placeholder\", \"Enter email\", 1, \"form-control\"], [\"class\", \"form-text text-muted\", 4, \"ngIf\"], [\"for\", \"exampleInputPassword1\"], [\"type\", \"password\", \"formControlName\", \"password\", \"placeholder\", \"Password\", 1, \"form-control\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"disabled\"], [1, \"form-text\", \"text-muted\"]],\n  template: function LoginComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h1\", 0);\n      i0.ɵɵtext(1, \"Login Page\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"div\", 1)(3, \"form\", 2);\n      i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_3_listener() {\n        return ctx.submitForm();\n      });\n      i0.ɵɵelementStart(4, \"div\", 3)(5, \"label\", 4);\n      i0.ɵɵtext(6, \"Email address\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(7, \"input\", 5);\n      i0.ɵɵtemplate(8, LoginComponent_small_8_Template, 2, 0, \"small\", 6);\n      i0.ɵɵtemplate(9, LoginComponent_small_9_Template, 2, 0, \"small\", 6);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"div\", 3)(11, \"label\", 7);\n      i0.ɵɵtext(12, \"Password\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(13, \"input\", 8);\n      i0.ɵɵtemplate(14, LoginComponent_small_14_Template, 2, 0, \"small\", 6);\n      i0.ɵɵtemplate(15, LoginComponent_small_15_Template, 2, 0, \"small\", 6);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(16, \"button\", 9);\n      i0.ɵɵtext(17, \"Submit\");\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ctx.loginForm.controls.email.touched && (ctx.loginForm.controls.email.errors == null ? null : ctx.loginForm.controls.email.errors.required));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.loginForm.controls.email.touched && (ctx.loginForm.controls.email.errors == null ? null : ctx.loginForm.controls.email.errors.email));\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ctx.loginForm.controls.password.touched && (ctx.loginForm.controls.password.errors == null ? null : ctx.loginForm.controls.password.errors.required));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.loginForm.controls.password.touched && ctx.loginForm.controls.password.errors);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"disabled\", !ctx.loginForm.valid);\n    }\n  },\n  dependencies: [i6.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AACA,SAAiCA,UAAU,QAAQ,gBAAgB;;;;;;;;;;ICMvDC,iCAC0F;IACtFA,4CACJ;IAAAA,iBAAQ;;;;;IAERA,iCACuF;IACnFA,gDACJ;IAAAA,iBAAQ;;;;;IAMRA,iCACgG;IAC5FA,uCACJ;IAAAA,iBAAQ;;;;;IAERA,iCACsF;IAClFA,qGACwB;IAAAA,iBAAQ;;;ADfhD,OAAM,MAAOC,cAAc;EAGzBC,YAA6BC,EAAe,EAClCC,cAA8B,EAC9BC,cAA8B,EAC9BC,MAAc,EACdC,mBAAwC;IAJrB,OAAE,GAAFJ,EAAE;IACrB,mBAAc,GAAdC,cAAc;IACd,mBAAc,GAAdC,cAAc;IACd,WAAM,GAANC,MAAM;IACN,wBAAmB,GAAnBC,mBAAmB;IAC3B,IAAI,CAACC,SAAS,EAAE;EAClB;EAEAC,QAAQ,IAER;EAEAD,SAAS;IACP,IAAI,CAACE,SAAS,GAAG,IAAI,CAACP,EAAE,CAACQ,KAAK,CAAC;MAC7BC,KAAK,EAAE,CAAC,EAAE,EAAE,CAACb,UAAU,CAACc,QAAQ,EAAEd,UAAU,CAACa,KAAK,CAAC,CAAC;MACpDE,QAAQ,EAAE,CAAC,EAAE,EAAE,CAACf,UAAU,CAACc,QAAQ,EAAEd,UAAU,CAACgB,OAAO,CAAC,iCAAiC,CAAC,EAAEhB,UAAU,CAACiB,SAAS,CAAC,CAAC,CAAC,EACnHjB,UAAU,CAACkB,SAAS,CAAC,EAAE,CAAC,CAAC;KAE1B,CAAC;EACJ;EAEAC,UAAU;IACR,IAAI,IAAI,CAACR,SAAS,CAACS,KAAK,EAAE;MACxB,IAAI,CAACf,cAAc,CAACgB,cAAc,CAACC,IAAI,CAAC,IAAI,CAAC;MAC7C,IAAI,CAAChB,cAAc,CAACiB,SAAS,CAAC,IAAI,CAACZ,SAAS,CAACa,KAAK,CAAC,CAACC,SAAS,CAAC;QAC5DH,IAAI,EAAGI,QAAmB,IAAI;UAC5B,IAAIA,QAAQ,EAAE;YACZ,IAAI,CAACnB,MAAM,CAACoB,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;WAChC,MACI;YACHC,KAAK,CAAC,mCAAmC,CAAC;;UAE5C,IAAI,CAACvB,cAAc,CAACgB,cAAc,CAACC,IAAI,CAAC,KAAK,CAAC;QAChD;OACD,CAAC;KACH,MACI;MACHM,KAAK,CAAC,sBAAsB,CAAC;;EAEjC;;AA1CW1B,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;QAAdA,cAAc;EAAA2B;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCd3BhC,6BAAwB;MAAAA,0BAAU;MAAAA,iBAAK;MAEvCA,8BAAuB;MACWA;QAAA,OAAYiC,gBAAY;MAAA,EAAC;MACnDjC,8BAAwB;MACYA,6BAAa;MAAAA,iBAAQ;MACrDA,2BAA2F;MAC3FA,mEAGQ;MAERA,mEAGQ;MACZA,iBAAM;MAENA,+BAAwB;MACeA,yBAAQ;MAAAA,iBAAQ;MACnDA,4BAA8F;MAC9FA,qEAGQ;MAERA,qEAGoC;MACxCA,iBAAM;MACNA,kCAA4E;MAAAA,uBAAM;MAAAA,iBAAS;;;MA5BzFA,eAAuB;MAAvBA,yCAAuB;MAKhBA,eAAmF;MAAnFA,kKAAmF;MAKnFA,eAAgF;MAAhFA,+JAAgF;MAShFA,eAAyF;MAAzFA,2KAAyF;MAKzFA,eAA+E;MAA/EA,wGAA+E;MAI1CA,eAA6B;MAA7BA,+CAA6B","names":["Validators","i0","LoginComponent","constructor","fb","loadingService","accountService","router","localStorageService","resetForm","ngOnInit","loginForm","group","email","required","password","pattern","minLength","maxLength","submitForm","valid","loadingSubject","next","loginUser","value","subscribe","response","navigate","alert","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\user\\source\\repos\\sqlinkTest\\sqlinkTest\\ClientApp\\src\\app\\components\\login\\login.component.ts","C:\\Users\\user\\source\\repos\\sqlinkTest\\sqlinkTest\\ClientApp\\src\\app\\components\\login\\login.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { cookieKeys } from 'src/app/models/emum';\nimport { LocalStorageService } from 'src/app/services/local-storage.service';\nimport { userModel } from '../../models/userModel';\nimport { LoadingService } from '../../services/loading.service';\nimport { AccountService } from '../../services/account.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n  loginForm!: FormGroup;\n\n  constructor(private readonly fb: FormBuilder,\n    private loadingService: LoadingService,\n    private accountService: AccountService,\n    private router: Router,\n    private localStorageService: LocalStorageService) {\n    this.resetForm();\n  }\n\n  ngOnInit(): void {\n\n  }\n\n  resetForm() {\n    this.loginForm = this.fb.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.pattern(/(?:\\d+[a-z]|[a-z]+\\d)[a-z\\d]*/gm), Validators.minLength(8),\n      Validators.maxLength(20)]\n      ]\n    });\n  }\n\n  submitForm() {\n    if (this.loginForm.valid) {\n      this.loadingService.loadingSubject.next(true);\n      this.accountService.loginUser(this.loginForm.value).subscribe({\n        next: (response: userModel) => {\n          if (response) {\n            this.router.navigate(['/info']);\n          }\n          else {\n            alert(\"User does not exist in the system\");\n          }\n          this.loadingService.loadingSubject.next(false);\n        }\n      });\n    }\n    else {\n      alert(\"loginForm is invalid\");\n    }\n  }\n}\n","<h1 class=\"text-center\">Login Page</h1>\n\n<div class=\"container\">\n    <form [formGroup]=\"loginForm\" (ngSubmit)=\"submitForm()\">\n        <div class=\"form-group\">\n            <label for=\"exampleInputEmail1\">Email address</label>\n            <input type=\"email\" class=\"form-control\" formControlName=\"email\" placeholder=\"Enter email\">\n            <small class=\"form-text text-muted\"\n                *ngIf=\"loginForm.controls.email.touched && loginForm.controls.email.errors?.required\">\n                Email address is required!\n            </small>\n\n            <small class=\"form-text text-muted\"\n                *ngIf=\"loginForm.controls.email.touched && loginForm.controls.email.errors?.email\">\n                Email address not well formed!\n            </small>\n        </div>\n\n        <div class=\"form-group\">\n            <label for=\"exampleInputPassword1\">Password</label>\n            <input type=\"password\" class=\"form-control\" formControlName=\"password\" placeholder=\"Password\">\n            <small class=\"form-text text-muted\"\n                *ngIf=\"loginForm.controls.password.touched && loginForm.controls.password.errors?.required\">\n                Password is required!\n            </small>\n\n            <small class=\"form-text text-muted\"\n                *ngIf=\"loginForm.controls.password.touched && loginForm.controls.password.errors\">\n                The password must contain only English letters and numbers,\n                Between 8-20 characters </small>\n        </div>\n        <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"!loginForm.valid\">Submit</button>\n    </form>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}