{"ast":null,"code":"import { BehaviorSubject, map } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { cookieKeys } from '../models/emum';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./local-storage.service\";\nimport * as i3 from \"@angular/router\";\nexport class AccountService {\n  constructor(httpClient, localStorageService, router) {\n    this.httpClient = httpClient;\n    this.localStorageService = localStorageService;\n    this.router = router;\n    this.userJson = localStorageService.get(cookieKeys.user);\n    this.userSubject = new BehaviorSubject(this.userJson ? JSON.parse(this.userJson) : null);\n  }\n  loginUser(user) {\n    return this.httpClient.post(`${environment.apiUrl}/UserDetails`, user).pipe(map(user => {\n      if (user) {\n        this.localStorageService.set(cookieKeys.token, user.token);\n        this.localStorageService.set(cookieKeys.user, JSON.stringify(user));\n        this.userSubject.next(user);\n      }\n      return user;\n    }));\n  }\n  getUserValue() {\n    return this.userSubject.value;\n  }\n  logout() {\n    localStorage.removeItem(cookieKeys.user);\n    this.userSubject.next(null);\n    this.router.navigate(['/login']);\n  }\n}\nAccountService.ɵfac = function AccountService_Factory(t) {\n  return new (t || AccountService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.LocalStorageService), i0.ɵɵinject(i3.Router));\n};\nAccountService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AccountService,\n  factory: AccountService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAGA,SAASA,eAAe,EAAEC,GAAG,QAAoB,MAAM;AACvD,SAASC,WAAW,QAAQ,8BAA8B;AAC1D,SAASC,UAAU,QAAQ,gBAAgB;;;;;AAQ3C,OAAM,MAAOC,cAAc;EAGzBC,YAAoBC,UAAsB,EAChCC,mBAAwC,EACxCC,MAAc;IAFJ,eAAU,GAAVF,UAAU;IACpB,wBAAmB,GAAnBC,mBAAmB;IACnB,WAAM,GAANC,MAAM;IACd,IAAI,CAACC,QAAQ,GAAGF,mBAAmB,CAACG,GAAG,CAACP,UAAU,CAACQ,IAAI,CAAC;IACxD,IAAI,CAACC,WAAW,GAAG,IAAIZ,eAAe,CAAmB,IAAI,CAACS,QAAQ,GAAGI,IAAI,CAACC,KAAK,CAAC,IAAI,CAACL,QAAQ,CAAC,GAAG,IAAI,CAAC;EAE5G;EAEAM,SAAS,CAACJ,IAAgB;IACxB,OAAO,IAAI,CAACL,UAAU,CAACU,IAAI,CAAY,GAAGd,WAAW,CAACe,MAAM,cAAc,EAAEN,IAAI,CAAC,CAC9EO,IAAI,CAACjB,GAAG,CAACU,IAAI,IAAG;MACf,IAAIA,IAAI,EAAE;QACR,IAAI,CAACJ,mBAAmB,CAACY,GAAG,CAAChB,UAAU,CAACiB,KAAK,EAAET,IAAI,CAACS,KAAK,CAAC;QAC1D,IAAI,CAACb,mBAAmB,CAACY,GAAG,CAAChB,UAAU,CAACQ,IAAI,EAAEE,IAAI,CAACQ,SAAS,CAACV,IAAI,CAAC,CAAC;QACnE,IAAI,CAACC,WAAW,CAACU,IAAI,CAACX,IAAI,CAAC;;MAE7B,OAAOA,IAAI;IACb,CAAC,CAAC,CAAC;EACP;EAEAY,YAAY;IACV,OAAO,IAAI,CAACX,WAAW,CAACY,KAAK;EAC/B;EAEAC,MAAM;IACJC,YAAY,CAACC,UAAU,CAACxB,UAAU,CAACQ,IAAI,CAAC;IACxC,IAAI,CAACC,WAAW,CAACU,IAAI,CAAC,IAAI,CAAC;IAC3B,IAAI,CAACd,MAAM,CAACoB,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;EAClC;;AA/BWxB,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAyB,SAAdzB,cAAc;EAAA0B,YAFb;AAAM","names":["BehaviorSubject","map","environment","cookieKeys","AccountService","constructor","httpClient","localStorageService","router","userJson","get","user","userSubject","JSON","parse","loginUser","post","apiUrl","pipe","set","token","stringify","next","getUserValue","value","logout","localStorage","removeItem","navigate","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\user\\source\\repos\\sqlinkTest\\sqlinkTest\\ClientApp\\src\\app\\services\\account.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BehaviorSubject, map, Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { cookieKeys } from '../models/emum';\nimport { loginModel } from '../models/loginModel';\nimport { personalDetailsModel, userModel } from '../models/userModel';\nimport { LocalStorageService } from './local-storage.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AccountService {\n  private userSubject: BehaviorSubject<userModel | null>;\n  private userJson: string | null;\n  constructor(private httpClient: HttpClient,\n    private localStorageService: LocalStorageService,\n    private router: Router) {\n    this.userJson = localStorageService.get(cookieKeys.user);\n    this.userSubject = new BehaviorSubject<userModel | null>(this.userJson ? JSON.parse(this.userJson) : null);\n\n  }\n\n  loginUser(user: loginModel): Observable<userModel> {\n    return this.httpClient.post<userModel>(`${environment.apiUrl}/UserDetails`, user)\n      .pipe(map(user => {\n        if (user) {\n          this.localStorageService.set(cookieKeys.token, user.token);\n          this.localStorageService.set(cookieKeys.user, JSON.stringify(user));\n          this.userSubject.next(user);\n        }\n        return user;\n      }));\n  }\n\n  getUserValue(): userModel | null {\n    return this.userSubject.value;\n  }\n\n  logout() {\n    localStorage.removeItem(cookieKeys.user);\n    this.userSubject.next(null);\n    this.router.navigate(['/login']);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}